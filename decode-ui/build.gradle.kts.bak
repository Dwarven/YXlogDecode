plugins {
    `java-library`
}

dependencies {
    implementation( project( ":decode-core" ) )
    implementation( "com.formdev:flatlaf:2.4" )
    implementation( "com.formdev:flatlaf-extras:2.4" )
    implementation( "com.miglayout:miglayout-swing:5.3" )
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation("org.apache.commons:commons-lang3:3.12.0")
    // https://mvnrepository.com/artifact/org.ini4j/ini4j
    implementation("org.ini4j:ini4j:0.5.4")
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation("commons-io:commons-io:2.11.0")
    implementation("net.lingala.zip4j:zip4j:2.11.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
}

tasks {
    jar {

        dependsOn( ":decode-core:jar" )

        manifest {
            attributes( "Main-Class" to "top.yinlingfeng.xlog.decode.ui.XLogDecodeUi" )

            if( JavaVersion.current() >= JavaVersion.VERSION_1_9 )
                attributes( "Multi-Release" to "true" )
        }

        exclude( "module-info.class" )
        exclude( "META-INF/versions/*/module-info.class" )
        //exclude("META-INF/BC1024KE.RSA", "META-INF/BC1024KE.SF", "META-INF/BC1024KE.DSA")
        //exclude("META-INF/BC2048KE.RSA", "META-INF/BC2048KE.SF", "META-INF/BC2048KE.DSA")
        // include all dependencies in jar
        from( {
            configurations.runtimeClasspath.get()
                .filter { it.name.endsWith( "jar" ) }
                .map { zipTree( it ).matching {
                    exclude( "META-INF/LICENSE" )
                    exclude( "META-INF/LICENSE.txt" )
                    exclude( "META-INF/NOTICE.txt" )
                } }
        } )
    }
}

tasks.getByName<Test>("test") {
    useJUnitPlatform()
}